name: Monocle Integration Tests

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

env:
  AZURE_OPENAI_API_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_API_DEPLOYMENT }}
  AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
  AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
  AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  integration-test:
    runs-on: ubuntu-latest
    environment: Stage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # - name: Export env vars from secret JSON
      #   env:
      #     INTEGRATION_TEST_CONFIG: ${{ secrets.INTEGRATION_TEST_CONFIG }}
        # run: |
        #   echo "$INTEGRATION_TEST_CONFIG" > env.json
        #   python <<EOF
        #   import json, os
        #   with open('env.json') as f:
        #       envs = json.load(f)
        #   with open(os.environ['GITHUB_ENV'], 'a') as env_file:
        #       for k, v in envs.items():
        #           print(f'::add-mask::{v}')  # mask secret values in logs
        #           env_file.write(f'{k}={v}\n')

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel toml

      - name: Build wheels
        run: |
          chmod +x ./.github/scripts/build.sh
          ./.github/scripts/build.sh

      - name: Install package and dev dependencies
        run: |
          pip install --upgrade pip
          pip install -e '.[dev]'

      - name: Run integration tests
        id: run-tests
        run: |
          set -e
          pytest tests/integration/test_langchain_chat_sample.py --tb=short | tee result.log
          EXIT_CODE=${PIPESTATUS[0]}
          grep -E 'FAILED.*::' result.log | cut -d ':' -f 1 | sort | uniq > failed_files.txt
          echo "Failed test files:"
          cat failed_files.txt
          exit $EXIT_CODE

      - name: Add Failed Files to Summary (Table)
        if: always()
        run: |
          if [[ -s failed_files.txt ]]; then
            {
              echo "### ❌ Failed Test Files"
              echo ""
              echo "| File Path |"
              echo "|-----------|"
              while read -r file; do
                echo "| $file |"
              done < failed_files.txt
            } >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ All integration tests passed!" >> $GITHUB_STEP_SUMMARY
          fi
