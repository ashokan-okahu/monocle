name: Publish to JFrog

on:
  push:
    branches:
      - copilot/fix-bd1d02f4-5e91-4701-a684-d71562c6d1b5
    inputs:
      version:
        description: 'Version of the package to release (beta/alpha versions allowed)'
        required: true
        type: string
        default: '5.0.0b23'
      branch:
        description: 'Branch to build from (defaults to main)'
        required: true
        type: string
        default: 'copilot/fix-bd1d02f4-5e91-4701-a684-d71562c6d1b5'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from (defaults to main)'
        required: false
        default: 'main'
        type: string
      version:
        description: 'Version of the package to release (beta/alpha versions allowed)'
        required: true
        type: string

jobs:
  publish-to-jfrog:
    # environment: ArtifactPublish
    environment: JFROG
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: üîé Validate version format
      # valid versions are. 0.5.0, 0.5.0a1, 0.5.0b1
        run: |
          version="${{ inputs.version }}"
          if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+((a|b)[0-9]*)?$ ]]; then
            echo "::error::Invalid version format"
            echo "‚ùå Expected: x.y.z, x.y.za, x.y.zaN, x.y.zb, or x.y.zbN"
            echo "‚ùå Provided: $version"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $version"

      - name: üìù Update version in pyproject.toml
        run: |
          version="${{ inputs.version }}"
          sed -i "s/^version = .*/version = \"$version\"/" pyproject.toml
          echo "‚úÖ Updated pyproject.toml with version: $version"
          grep "^version" pyproject.toml || echo "::warning::Version not found in pyproject.toml"

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: ‚öôÔ∏è Build wheels
        run: |
          chmod +x ./.github/scripts/build.sh
          ./.github/scripts/build.sh
          echo "‚úÖ Build completed. Artifacts in dist/:"
          ls -lh dist/

      - name: üì¶ Install Twine
        run: pip install --quiet --upgrade twine

      - name: üöÄ Publish to JFrog
        env:
          JFROG_URL: ${{ secrets.JFROG_REPOSITORY_URL }}
          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
        run: |
          if [[ -z "$JFROG_URL" ]]; then
            echo "::error::JFROG_REPOSITORY_URL secret is not set"
            exit 1
          fi
          if [[ -z "$JFROG_USERNAME" ]]; then
            echo "::error::JFROG_USERNAME secret is not set"
            exit 1
          fi
          if [[ -z "$JFROG_PASSWORD" ]]; then
            echo "::error::JFROG_PASSWORD secret is not set"
            exit 1
          fi
          
          echo "üîë Authenticated as $JFROG_USERNAME"
          echo "üåê Publishing to: $JFROG_URL"
          python3 -m twine upload \
            --non-interactive --skip-existing \
            --repository-url "$JFROG_URL" dist/* \
            --username "$JFROG_USERNAME" --password "$JFROG_PASSWORD"

      - name: üìã Summary
        run: |
          echo "‚úÖ Successfully published version: ${{ inputs.version }}"
          echo "üì¶ Source branch: ${{ inputs.branch }}"
          echo "üèóÔ∏è Uploaded artifacts from: dist/"
